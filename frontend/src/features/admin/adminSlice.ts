// src/features/admin/adminSlice.ts
import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { api } from "../../api/axios";
import type { TeamMemberDTO } from "../team/member";

export type Role = "FREE" | "PREMIUM" | "ADMIN";
export type UserStatus = "ACTIVE" | "INACTIVE" | "BANNED";

export type TeamSummaryDto = {
  teamId: string;
  teamName: string;
  description: string;
  createdBy: string | null;
  createdByAvatarUrl: string | null;
  ownerFullName: string | null;
  ownerAvatarUrl: string | null;
  createdAt: string;
  members: TeamMemberDTO[];
  totalFiles: number;
  totalComments: number;
  totalTasks: number;
};

export type UserSummaryDto = {
  id: string;
  email: string;
  fullName: string;
  role: Role;
  status: UserStatus;
  createdAt: string;
};

// ‚úÖ DTO l·ªçc ng∆∞·ªùi d√πng n√¢ng c·∫•p
export type SearchRequestDto = {
  keyword?: string;
  role?: Role;
  createdFrom?: string;
  createdTo?: string;
};

// üîé Thunk t√¨m ki·∫øm theo t·ª´ kho√° ƒë∆°n gi·∫£n
export const searchUsersByKeyword = createAsyncThunk<
  UserSummaryDto[],
  string,
  { rejectValue: string }
>("admin/searchUsersByKeyword", async (keyword, { rejectWithValue }) => {
  try {
    const res = await api.post("/api/admin/users/search", {
      firstname: keyword,
      lastname: keyword,
      email: keyword,
    });
    return res.data.data;
  } catch {
    return rejectWithValue("Kh√¥ng th·ªÉ t√¨m ki·∫øm ng∆∞·ªùi d√πng");
  }
});

// üîç Thunk t√¨m ki·∫øm n√¢ng cao (theo nhi·ªÅu ti√™u ch√≠)
export const searchUsersByCriteria = createAsyncThunk<
  UserSummaryDto[],
  SearchRequestDto,
  { rejectValue: string }
>("admin/searchUsersByCriteria", async (filters, { rejectWithValue }) => {
  try {
    const res = await api.post("/api/admin/users/search", filters);
    return res.data.data;
  } catch {
    return rejectWithValue("Kh√¥ng th·ªÉ l·ªçc ng∆∞·ªùi d√πng");
  }
});

// üìã L·∫•y danh s√°ch ng∆∞·ªùi d√πng to√†n b·ªô
export const fetchUserList = createAsyncThunk<
  UserSummaryDto[],
  void,
  { rejectValue: string }
>("admin/fetchUserList", async (_, { rejectWithValue }) => {
  try {
    const res = await api.get("/api/admin/users");
    return res.data.data;
  } catch {
    return rejectWithValue("Kh√¥ng th·ªÉ l·∫•y danh s√°ch ng∆∞·ªùi d√πng");
  }
});

// üîÑ C·∫≠p nh·∫≠t vai tr√≤ ng∆∞·ªùi d√πng
export const updateUserRole = createAsyncThunk<
  { id: string; role: Role },
  { id: string; role: Role },
  { rejectValue: string }
>("admin/updateUserRole", async ({ id, role }, { rejectWithValue }) => {
  try {
    await api.put(`/api/admin/users/${id}/role`, { role });
    return { id, role };
  } catch {
    return rejectWithValue("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t vai tr√≤");
  }
});

// üóëÔ∏è Xo√° ng∆∞·ªùi d√πng
export const deleteUser = createAsyncThunk<
  string,
  string,
  { rejectValue: string }
>("admin/deleteUser", async (id, { rejectWithValue }) => {
  try {
    await api.delete(`/api/admin/users/${id}`);
    return id;
  } catch {
    return rejectWithValue("Kh√¥ng th·ªÉ xo√° ng∆∞·ªùi d√πng");
  }
});

// üìÇ L·∫•y danh s√°ch nh√≥m
export const fetchTeamSummaryList = createAsyncThunk<
  TeamSummaryDto[],
  void,
  { rejectValue: string }
>("admin/fetchTeamSummaryList", async (_, { rejectWithValue }) => {
  try {
    const res = await api.get("/api/admin/teams");
    return res.data;
  } catch {
    return rejectWithValue("Kh√¥ng th·ªÉ l·∫•y danh s√°ch nh√≥m");
  }
});

//x√≥a nh√≥m
export const deleteTeamById = createAsyncThunk<
  string,
  string,
  { rejectValue: string }
>("admin/deleteTeamById", async (teamId, { rejectWithValue }) => {
  try {
    await api.delete(`/api/admin/teams/${teamId}`);
    return teamId;
  } catch {
    return rejectWithValue("Kh√¥ng th·ªÉ xo√° nh√≥m");
  }
});

// üß© Slice state
type AdminState = {
  users: UserSummaryDto[];
  loadingUsers: boolean;
  errorUsers: string | null;
  deletingUserId: string | null;
  teams: TeamSummaryDto[];
  loadingTeams: boolean;
  errorTeams: string | null;
  deletingTeamId: string | null;
};

const initialState: AdminState = {
  users: [],
  loadingUsers: false,
  errorUsers: null,
  deletingUserId: null,
  teams: [],
  loadingTeams: false,
  errorTeams: null,
  deletingTeamId: null,
};

// üç∞ Slice
const adminSlice = createSlice({
  name: "admin",
  initialState,
  reducers: {
    clearErrorUsers(state) {
      state.errorUsers = null;
    },
  },
  extraReducers: (builder) => {
    builder
      // üßæ Fetch users
      .addCase(fetchUserList.pending, (state) => {
        state.loadingUsers = true;
        state.errorUsers = null;
      })
      .addCase(fetchUserList.fulfilled, (state, action) => {
        state.loadingUsers = false;
        state.users = action.payload;
      })
      .addCase(fetchUserList.rejected, (state, action) => {
        state.loadingUsers = false;
        state.errorUsers = action.payload ?? "C√≥ l·ªói x·∫£y ra";
      })

      // üîÑ Update role
      .addCase(updateUserRole.fulfilled, (state, action) => {
        const { id, role } = action.payload;
        const user = state.users.find((u) => u.id === id);
        if (user) {
          user.role = role;
        }
      })
      .addCase(updateUserRole.rejected, (state, action) => {
        state.errorUsers = action.payload ?? "C√≥ l·ªói khi c·∫≠p nh·∫≠t vai tr√≤";
      })

      // üóë Delete user
      .addCase(deleteUser.pending, (state, action) => {
        state.deletingUserId = action.meta.arg;
      })
      .addCase(deleteUser.fulfilled, (state, action) => {
        state.users = state.users.filter((u) => u.id !== action.payload);
        state.deletingUserId = null;
      })
      .addCase(deleteUser.rejected, (state, action) => {
        state.errorUsers = action.payload ?? "C√≥ l·ªói khi xo√° ng∆∞·ªùi d√πng";
        state.deletingUserId = null;
      })

      // üìÇ Fetch teams
      .addCase(fetchTeamSummaryList.pending, (state) => {
        state.loadingTeams = true;
        state.errorTeams = null;
      })
      .addCase(fetchTeamSummaryList.fulfilled, (state, action) => {
        state.loadingTeams = false;
        state.teams = action.payload;
      })
      .addCase(fetchTeamSummaryList.rejected, (state, action) => {
        state.loadingTeams = false;
        state.errorTeams = action.payload ?? "C√≥ l·ªói khi l·∫•y danh s√°ch nh√≥m";
      })

      // üîç Search by keyword
      .addCase(searchUsersByKeyword.pending, (state) => {
        state.loadingUsers = true;
        state.errorUsers = null;
      })
      .addCase(searchUsersByKeyword.fulfilled, (state, action) => {
        state.loadingUsers = false;
        state.users = action.payload;
      })
      .addCase(searchUsersByKeyword.rejected, (state, action) => {
        state.loadingUsers = false;
        state.errorUsers = action.payload ?? "L·ªói khi t√¨m ki·∫øm";
      })

      // üîé Search by criteria
      .addCase(searchUsersByCriteria.pending, (state) => {
        state.loadingUsers = true;
        state.errorUsers = null;
      })
      .addCase(searchUsersByCriteria.fulfilled, (state, action) => {
        state.loadingUsers = false;
        state.users = action.payload;
      })
      .addCase(searchUsersByCriteria.rejected, (state, action) => {
        state.loadingUsers = false;
        state.errorUsers = action.payload ?? "L·ªói khi l·ªçc ng∆∞·ªùi d√πng";
      })
      // Delete team
      .addCase(deleteTeamById.pending, (state, action) => {
        state.deletingTeamId = action.meta.arg;
      })
      .addCase(deleteTeamById.fulfilled, (state, action) => {
        state.teams = state.teams.filter((t) => t.teamId !== action.payload);
        state.deletingTeamId = null;
      })
      .addCase(deleteTeamById.rejected, (state, action) => {
        state.errorTeams = action.payload ?? "C√≥ l·ªói khi xo√° nh√≥m";
        state.deletingTeamId = null;
      })
      ;
  },
});

export const { clearErrorUsers } = adminSlice.actions;
export default adminSlice.reducer;